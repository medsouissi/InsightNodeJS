#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-mysql:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * config ejs views.
 */
//  const path = require("path")
 const express = require("express");
 app.use(express.urlencoded({ extended: false }))
 app.use(express.json())
 app.set('views', 'views')
 app.set('view engine', 'ejs')

//  app.use(express.static(__dirname + '/public'));

 // Mount the middleware at "/static" to serve static content only when their request path is prefixed with "/static".
 
     // GET /static/style.css etc.
    //  app.use('/static', express.static(__dirname + '/public'));

 /**
 * Create HTTP server.
 */

 const io = require('socket.io')(server)

io.use(function (socket, next) {
    sessionOptions(socket.request, socket.request.res, next)
})

io.on('connection', function (socket) {
    if (socket.request.session.user) {
        let user = socket.request.session.user

        socket.emit('welcome', { username: user.email })
        // socket.emit('welcome', { username: user.email, avatar: user.avatar })
        // socket.on('chatMessageFromBrowser', function (data) {
        //     socket.broadcast.emit('chatMessageFromServer', { message: data.message, username: user.username, avatar: user.avatar })
        // })
    }
})
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
